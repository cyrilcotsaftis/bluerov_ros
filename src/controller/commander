#!/usr/bin/env python

import rospy
from std_msgs.msg import UInt16
from std_msgs.msg import Bool
from sensor_msgs.msg import Joy

class Commander():
    def __init__(self, arm=True, pwm_forward=1550, pwm_neutral=1500, rosrate=4):
        self.pub_rc3 = rospy.Publisher('/BlueRov2/rc_channel3/set_pwm', UInt16, queue_size=10) #THROTTLE
        self.pub_rc4 = rospy.Publisher('/BlueRov2/rc_channel4/set_pwm', UInt16, queue_size=10) #YAW
        self.pub_rc5 = rospy.Publisher('/BlueRov2/rc_channel5/set_pwm', UInt16, queue_size=10) #FORWARD
        self.pub_rc6 = rospy.Publisher('/BlueRov2/rc_channel6/set_pwm', UInt16, queue_size=10) #LATERAL
        self.pub_rc8 = rospy.Publisher('/BlueRov2/rc_channel8/set_pwm', UInt16, queue_size=10) #CAMERA TILT 
        rospy.Subscriber('/Command/depth', UInt16, self._callback_depth)
        rospy.Subscriber('/Command/heading', UInt16, self._callback_heading)
        rospy.Subscriber('/Command/joy', Joy, self._callback_joy)

        self.pub_arm = rospy.Publisher('/BlueRov2/arm', Bool, queue_size=10)
        self.rate = rospy.Rate(rosrate)
        
        self.pwm_forward = pwm_forward
        self.pwm_neutral = 1500
        self.armed = arm
        self.pwm_depth = 0
        self.pwm_heading = 0
        
        self.override_controller = 0 # 0:automatic control, 1:gamepad control
        self.gamepad_axes = [self.pwm_neutral, self.pwm_neutral, self.pwm_neutral] # THROTTLE,YAW,FORWARD
        self.gamepad_buttons = [0,0] # ARM, OVERRIDE_CONTROLLER

    def _callback_depth(self,msg):
	    self.pwm_depth = msg.data

    def _callback_heading(self,msg):
	    self.pwm_heading = msg.data

    def _callback_joy(self,msg):
        self.gamepad_axes = msg.axes
        self.gamepad_buttons = msg.buttons
        self.override_controller = self.gamepad_buttons[1]
        print("AXES : {}, BUTTONS : {}".format(self.gamepad_axes, self.gamepad_buttons))

    def publish_controller_command(self):
        self.pub_arm.publish(self.armed)
        self.pub_rc3.publish(self.pwm_depth)

#	    if abs(self.pwm_heading-self.pwm_neutral)>5:  # Correct the heading
#		    self.pub_rc4.publish(self.pwm_heading)
#	    else:
#		    self.pub_rc5.publish(self.pwm_forward) # Go forward

        self.pub_rc4.publish(self.pwm_heading)
        self.pub_rc5.publish(self.pwm_forward)


    def publish_gamepad_command(self):
        """gamepad_axes = [THROTTLE, YAW, FORWARD, LATERAL]
           gamepad_buttons = [ARM, OVERRIDE_CONTROLLER, PWM_CAMERA, GAIN_LIGHT]
        """
        self.pub_arm.publish(self.gamepad_buttons[0])
        self.pub_rc8.publish(self.gamepad_buttons[2])
        
        self.pub_rc3.publish(self.gamepad_axes[0])
        self.pub_rc4.publish(self.gamepad_axes[1])
        self.pub_rc5.publish(self.gamepad_axes[2])
        self.pub_rc6.publish(self.gamepad_axes[3])

    def master_control(self):
        if self.override_controller == 1:
            self.publish_gamepad_command()
        else :
            self.publish_controller_command()

if __name__ == "__main__":
    rospy.init_node('Commander', anonymous=True)
    cmd = Commander(pwm_forward=1500)
    while not rospy.is_shutdown():
        cmd.master_control()
        cmd.rate.sleep()


