#!/usr/bin/env python

import rospy
from std_msgs.msg import String
from std_msgs.msg import UInt16
from std_msgs.msg import Bool
from sensor_msgs.msg import Imu
from bluerov_ros_playground.msg import Set_velocity

class Velocity_Control():
    def __init__(self, velocity_desired=1, pwm_max=1550, pwm_neutral=1500, KP=1, KD=1, rosrate=4):
        self.pub_pwm = rospy.Publisher('/Command/velocity', UInt16, queue_size=10)
        rospy.Subscriber('/BlueRov2/imu/data', Imu, self._callback_imu_data)
        self.rate = rospy.Rate(rosrate)

        self.velocity_desired = velocity_desired
        self.imu_data = [0, 0, 0] 
        self.pwm_max = pwm_max
        self.pwm_neutral = pwm_neutral
        self.KP = KP
        self.KD = KD

        self.time = rospy.get_time()
        self.velocity = 0
    
        rospy.Subscriber('/Settings/set_velocity', Set_velocity, self._callback_set_vel)
        
    def _callback_imu_data(self, msg):
	    self.imu_data = [msg.linear_acceleration.x,
                        msg.linear_acceleration.y,
                        msg.linear_acceleration.z]
        	                
    def _callback_set_vel(self, msg):
        self.velocity_desired = msg.velocity_desired
        self.pwm_max = msg.pwm_max
        self.pwm_neutral = msg.pwm_neutral
        self.KP = msg.KP 
        self.KD = msg.KD 
        self.rosrate = msg.rosrate

    def control(self):
        t = rospy.get_time() #time in secs
        delta_t = t - self.time
        self.time = t
        acceleration = self.imu_data[0]
        self.velocity += acceleration*delta_t

        u = self.KP*(self.velocity_desired-self.velocity) - self.KD*acceleration
        return u

    def saturation(self, pwm):
	    pwm_min = self.pwm_neutral - (self.pwm_max - self.pwm_neutral)
	    if pwm > self.pwm_max :
		    pwm = self.pwm_max
	    if pwm < pwm_min:
		    pwm = pwm_min
	    return int(pwm)

    def main(self):
        u = self.control()
        pwm = 1500 + u 
        pwm = self.saturation(pwm)
        self.pub_pwm.publish(pwm)

if __name__ == "__main__":
    rospy.init_node('velocity_controller', anonymous=True)
    velocity_control = Velocity_Control()
    
    while not rospy.is_shutdown():
        velocity_control.main()
        velocity_control.rate.sleep()
