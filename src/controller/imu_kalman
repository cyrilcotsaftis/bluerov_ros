#!/usr/bin/env python

from pykalman import KalmanFilter
import numpy as np
import matplotlib.pyplot as plt

import rospy
from sensor_msgs.msg import Imu

AccX_Value = 0
AccX_Variance = 0.05
rosrate = 6.

rospy.init_node('imu_kalman', anonymous=True)
rospy.Subscriber('/BlueRov2/imu/data', Imu, _callback_imu_data)
rospy.Subscriber('/BlueRov2/imu/imu1', Imu, _callback_imu_1)
rospy.Subscriber('/BlueRov2/imu/imu2', Imu, _callback_imu_2)
rate = rospy.Rate(rosrate)

def _callback_imu_data(msg):
  global AccX_ValueData
  AccX_ValueData = msg.linear_acceleration.x

def _callback_imu_1(msg):
  global AccX_ValueImu1
  AccX_ValueImu1 = msg.linear_acceleration.x
  
def _callback_imu_2(msg):
  global AccX_ValueImu2
  AccX_ValueImu2 = msg.linear_acceleration.x

AccX_Value = (AccX_ValueData+AccX_ValueImu1+AccX_ValueImu2)/3

# time step
dt = 1/100.

# transition_matrix  
F = [[1, dt, 0.5*dt**2], 
     [0,  1,       dt],
     [0,  0,        1]]

# observation_matrix   
H = [0, 0, 1]

# transition_covariance 
Q = [[0.2,    0,      0], 
     [  0,  0.1,      0],
     [  0,    0,  10e-4]]

# observation_covariance 
#(the value can be calculated based on your sensors datasheet).
R = AccX_Variance

# initial_state_mean
X0 = [0,
      0,
      AccX_Value]

# initial_state_covariance
P0 = [[  0,    0,               0], 
      [  0,    0,               0],
      [  0,    0,   AccX_Variance]]


global filtered_state_means
global filtered_state_covariances
global kf

n_dim_state = 3
filtered_state_means = np.zeros((2, n_dim_state))
filtered_state_covariances = np.zeros((2, n_dim_state, n_dim_state))

kf = KalmanFilter(transition_matrices = F, 
                  observation_matrices = H, 
                  transition_covariance = Q, 
                  observation_covariance = R, 
                  initial_state_mean = X0, 
                  initial_state_covariance = P0)


filtered_state_means[0] = X0
filtered_state_covariances[0] = P0

def kalman_update():
  filtered_state_means[1], filtered_state_covariances[1] = (
        kf.filter_update(
            filtered_state_means[0],
            filtered_state_covariances[0],
            [AccX_Value]
        )
  )
  filtered_state_means[0], filtered_state_covariances[0] = filtered_state_means[1], filtered_state_covariances[1]
  

#AccX_estimated = filtered_state_means[1, 2]
#VelX_estimated = filtered_state_means[1, 1]
#PosX_estimated = filtered_state_means[1, 0]


if __name__ == "__main__":
    rospy.init_node('imu_kalman', anonymous=True)
 
    while not rospy.is_shutdown():
        kalman_update()
        print("AccX_Value", AccX_Value)
        print("AccX_estimated", filtered_state_means[1, 2])
        print("VelX_estimated", filtered_state_means[1, 1])
        print("PosX_estimated", filtered_state_means[1, 0]) 
        
        rate.sleep()
