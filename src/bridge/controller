#!/usr/bin/env python

import rospy
from std_msgs.msg import String
from std_msgs.msg import UInt16
from std_msgs.msg import Bool
from sensor_msgs.msg import Imu
from bluerov_ros_playground.msg import Bar30


def callback_imu(msg):
	q_in = [msg.orientation.x,
            msg.orientation.y,
            msg.orientation.z,
			msg.orientation.w]
#	rospy.loginfo("{}".format(q_in))
	print(q_in)

def callback_bar30(msg):
	q_in = [ msg.press_diff,
            msg.press_abs,
	    msg.temperature]
        print(q_in) 

def listener():
    rospy.Subscriber('/BlueRov2/imu/data', Imu, callback_imu)
    # spin() simply keeps python from exiting until this node is stopped
    rospy.spin()

def talker():
	pub_rc3 = rospy.Publisher('/BlueRov2/rc_channel3/set_pwm', UInt16, queue_size=10)
	pub_arm = rospy.Publisher('/BlueRov2/arm', Bool, queue_size=10)
	rospy.init_node('controller', anonymous=True)
	rate = rospy.Rate(4) # 4hz
	pub_arm.publish(1)
	while not rospy.is_shutdown():
		pwm = 1700
		pub_rc3.publish(pwm)
		rate.sleep()

rospy.init_node('controller', anonymous=True)

#pub_rc3 = rospy.Publisher('/BlueRov2/rc_channel3/set_pwm', UInt16, queue_size=10)
pub_arm = rospy.Publisher('/BlueRov2/arm', Bool, queue_size=10)
rate = rospy.Rate(4)

while not rospy.is_shutdown():
#	rospy.Subscriber('/BlueRov2/imu/data', Imu, callback_imu)
	pub_arm.publish(1)
	rospy.Subscriber('/BlueRov2/bar30', Bar30, callback_bar30)
	pwm = 1600
	#pub_rc3.publish(pwm)
	rate.sleep()
